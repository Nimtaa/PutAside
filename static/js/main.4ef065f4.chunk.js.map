{"version":3,"sources":["components/Task.js","components/Rest.js","components/Start.js","serviceWorker.js","index.js"],"names":["Option","Select","Task","props","state","timeValue","inputValue","showStart","tasks","data","enteredTask","handleChange","bind","handleClick","handleInputChange","value","this","setState","e","target","savedTasks","localStorage","getItem","storage","JSON","parse","length","key","task","className","style","width","placeholder","onChange","type","icon","PlusOutlined","onClick","React","Component","Rest","columns","title","dataIndex","checkedTasks","showTable","selectedRowKeys","handleClickHome","handleSelectRow","storedTasks","numTasks","sort","a","b","time","sum","i","Number","push","desc","selectedRows","selectedTask","dataSource","message","success","filter","item","rowSelection","ghost","HomeOutlined","showHeader","pagination","Start","showRest","handleAddClick","handleRestClick","handleEnteredTask","removeItem","forEach","element","setItem","stringify","block","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4ef065f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../assets/Task.css'\r\nimport { Select, Space, Input, Button  } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport Start from './Start';\r\n\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nclass Task extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeValue : 5,\r\n            inputValue : \"\",\r\n            showStart : false,  \r\n            tasks : [],\r\n            data : [],\r\n            enteredTask : {}\r\n        };\r\n        \r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        // if(this.props.data){\r\n        //     console.log(this.props.data.data)   \r\n        //     this.setState({data : this.props.data.data})\r\n        // }   \r\n    }\r\n    handleChange(value) {\r\n        this.setState({timeValue: value});\r\n    }\r\n\r\n    handleInputChange(e){\r\n        this.setState({inputValue: e.target.value});\r\n    }\r\n\r\n    handleClick(){\r\n\r\n        var savedTasks = 0\r\n        if(localStorage.getItem('tasks'))   {\r\n            var storage = JSON.parse(localStorage.getItem('tasks'))\r\n            if(storage.length !== 0) savedTasks = storage[storage.length - 1].key\r\n        }\r\n        \r\n        var task = {\r\n            'desc': this.state.inputValue,\r\n            'time': this.state.timeValue,\r\n            'key' : savedTasks + 1\r\n        }\r\n        // this.setState(state => ({\r\n        //     data: [...state.data, task],\r\n        //     showStart: true\r\n        //   }))\r\n        this.setState({\r\n            enteredTask : task,\r\n            showStart: true\r\n        })\r\n    }\r\n    render(){\r\n        if(!this.state.showStart){\r\n            return (   \r\n                <div className=\"Task\">\r\n                    <p>Hmm..! What task? How much time?</p>\r\n                    <div className=\"Task-container\">\r\n                        <Space>\r\n                            <Input style={{width : 250}} placeholder=\"Explain...\" onChange={this.handleInputChange}/>\r\n                            <Select placeholder=\"Time\" style={{ width: 90 }} onChange={this.handleChange}>\r\n                                <Option value=\"5\">5 min</Option>\r\n                                <Option value=\"10\">10 min</Option>\r\n                                <Option value=\"15\">15 min</Option>\r\n                                <Option value=\"30\">30 min</Option>\r\n                                <Option value=\"45\">45 min</Option>\r\n                                <Option value=\"60\">60 min</Option>\r\n                            </Select>\r\n                            <Button type=\"primary\"  icon={ <PlusOutlined />} onClick={this.handleClick}/>\r\n                        </Space>\r\n                    \r\n                    </div>\r\n                </div>\r\n                )\r\n            }\r\n        else{\r\n            return(<Start data = {this.state} />)\r\n        }\r\n        }\r\n    \r\n}\r\nexport default Task;\r\n","import React from 'react';\r\nimport '../assets/Rest.css'\r\nimport { Button, Table, Select, Tooltip, message } from 'antd';\r\nimport { HomeOutlined } from '@ant-design/icons';\r\nimport Start from './Start';\r\n\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nclass Rest extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeValue : 5,\r\n            inputValue : \"\",\r\n            data : [],\r\n            checkedTasks : [],\r\n            showStart : false,\r\n            showTable : false,\r\n            selectedRowKeys: []\r\n        };\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleClickHome = this.handleClickHome.bind(this)\r\n        this.handleSelectRow = this.handleSelectRow.bind(this)\r\n      }\r\n      columns = [\r\n        {\r\n          title: 'Task',\r\n          dataIndex: 'task',\r\n          key: 'task',  \r\n        },\r\n        {\r\n          title: 'Time',\r\n          dataIndex: 'time',\r\n          key: 'time',\r\n        }\r\n      ];\r\n    handleChange(value) {\r\n    \r\n        // var storedTasks = this.props.data.data\r\n        var storedTasks = JSON.parse(localStorage.getItem('tasks'))\r\n        var numTasks = storedTasks.length\r\n        \r\n        storedTasks.sort(function(a, b) {\r\n            var keyA = a.time,\r\n            keyB = b.time;\r\n            return (keyA - keyB);\r\n        });\r\n\r\n        var sum = 0, data = [];\r\n        for(var i =0; i<numTasks; i++){\r\n            sum += Number(storedTasks[i].time)\r\n            if(sum <= Number(value)) {\r\n                data.push(\r\n                    {\r\n                        task: storedTasks[i].desc, \r\n                        time: storedTasks[i].time,\r\n                        key: storedTasks[i].key\r\n                    })\r\n            }\r\n        }\r\n        this.setState({timeValue: value, showTable: true, data:data}, () =>{\r\n        })\r\n    }\r\n    handleClickHome(){       \r\n        this.setState({showStart : true, showTable: false})\r\n    }\r\n    handleSelectRow (selectedRowKeys, selectedRows) {\r\n\r\n        const selectedTask = selectedRows[selectedRows.length - 1] \r\n        const dataSource = [...this.state.data];\r\n        message.success(selectedTask.task + ' Completed!');\r\n        this.setState(\r\n            {data : dataSource.filter(item => item.task !== selectedTask.task)}, () =>{\r\n                this.setState({checkedTasks : [...this.state.checkedTasks, selectedTask]})\r\n            } \r\n        )\r\n        // this.setState({checkedTasks : [...this.state.checkedTasks, selectedTask]})\r\n    }\r\n    render(){\r\n        const rowSelection = {\r\n            onChange: (selectedRowKeys, selectedRows) => {this.handleSelectRow(selectedRowKeys, selectedRows)}\r\n        }\r\n        if(this.state.showTable){\r\n            return(\r\n                <div className=\"RestTable\">\r\n                    <Tooltip title=\"Back Home\">\r\n                        <Button ghost icon={ <HomeOutlined />} onClick={this.handleClickHome}/>\r\n                    </Tooltip>\r\n                    <p>I want to rest for {this.state.timeValue} minutes!</p>\r\n                    <Table \r\n                    rowSelection={{\r\n                        type: 'radio',\r\n                        ...rowSelection\r\n                    }}\r\n                    columns={this.columns} dataSource={this.state.data} showHeader = {false}\r\n                    pagination= {false}/>\r\n                </div>\r\n            )\r\n        }   \r\n        else if(!this.state.showStart){\r\n            return (   \r\n                <div className=\"Rest\">\r\n                    <Tooltip title=\"Back Home\">\r\n                     <Button ghost icon={ <HomeOutlined />} onClick={this.handleClickHome}/>\r\n                    </Tooltip>\r\n                    <p>Great! How much?</p>\r\n                    <div className=\"Task-container\">\r\n                            <Select  placeholder = \"Time\" style={{ width: 118 }} onChange={this.handleChange}>\r\n                                <Option value=\"5\">5 min</Option>\r\n                                <Option value=\"10\">10 min</Option>\r\n                                <Option value=\"15\">15 min</Option>\r\n                                <Option value=\"30\">30 min</Option>\r\n                                <Option value=\"45\">45 min</Option>\r\n                                <Option value=\"60\">60 min</Option>\r\n                            </Select>               \r\n                            \r\n                    </div>  \r\n                </div>\r\n                \r\n                )\r\n            }\r\n        else {\r\n            return(<Start data = {this.state} />)\r\n        }\r\n        }\r\n}\r\nexport default Rest;","import React from 'react';\r\nimport '../assets/Start.css'\r\nimport { Button } from 'antd';\r\nimport Task from './Task';\r\nimport Rest from './Rest';\r\n\r\nclass Start extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        showStart: true,\r\n        showRest : false,\r\n        tasks : []\r\n    };\r\n    this.handleAddClick = this.handleAddClick.bind(this)\r\n    this.handleRestClick = this.handleRestClick.bind(this)\r\n    // this.handleResetClick = this.handleResetClick(this)\r\n    this.handleEnteredTask = this.handleEnteredTask.bind(this)\r\n  }\r\n\r\n  componentDidMount(){\r\n    // console.log(localStorage.getItem('tasks'))\r\n    if(this.props.data){\r\n      //add enteredTask from Task.js to the tasks array state\r\n      if(this.props.data.enteredTask){\r\n        //check if tasks have that task?\r\n        this.handleEnteredTask(this.props.data.enteredTask)\r\n      }\r\n      // Filter tasks with checked ones\r\n      if(this.props.data.checkedTasks){\r\n        var savedTasks = JSON.parse(localStorage.getItem('tasks'))\r\n        localStorage.removeItem('tasks')\r\n\r\n        this.props.data.checkedTasks.forEach(element => {\r\n            savedTasks = savedTasks.filter(item => item.desc !== element.task)\r\n        });\r\n        localStorage.setItem('tasks', JSON.stringify(savedTasks))\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  handleEnteredTask(enteredTask){\r\n    // this.setState({tasks: this.state.tasks.concat([enteredTask])}, ()=>{\r\n    //   localStorage.setItem('tasks',JSON.stringify(this.state.tasks))\r\n    // })\r\n    var tasks = localStorage.getItem('tasks')\r\n    var savedTasks = []\r\n    if(tasks){\r\n      savedTasks = JSON.parse(tasks)\r\n    }\r\n    savedTasks.push(enteredTask)\r\n    localStorage.setItem('tasks',JSON.stringify(savedTasks))\r\n  }\r\n\r\n  handleAddClick(){\r\n    this.setState({showStart: false});\r\n  }\r\n  \r\n  handleRestClick(){\r\n    this.setState({showStart: false}, () =>{\r\n      this.setState({showRest : true})\r\n    })\r\n  }\r\n\r\n  // handleResetClick(){\r\n  //   localStorage.clear()\r\n  //   console.log(\"localstorage cleared\")\r\n  // }\r\n\r\n  render(){\r\n    if(this.state.showStart){\r\n      return (\r\n        <div className=\"Start\">\r\n            <header className=\"App-header\">\r\n                <p>What do you want to do?</p>\r\n                <div className=\"Button-container\">\r\n                    <Button block ghost onClick={this.handleAddClick}>Add Task</Button>\r\n                    <Button type = \"primary\" block onClick={this.handleRestClick}>Rest</Button>\r\n                    {/* <Button type = \"primary\" block onClick={this.handleResetClick}>Reset Tasks</Button> */}\r\n                </div>\r\n            </header>\r\n        </div>\r\n      );\r\n    }\r\n    else if(!this.state.showRest){\r\n      return(<Task data={this.state.tasks.length}></Task>)\r\n    }\r\n    else{\r\n      return (<Rest></Rest>)\r\n    }\r\n    \r\n  }\r\n}\r\nexport default Start;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport  Start from './components/Start';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Start/>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}